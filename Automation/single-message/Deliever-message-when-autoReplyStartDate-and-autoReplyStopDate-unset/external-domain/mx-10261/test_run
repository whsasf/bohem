#!/bin/bash
# this test script is applicable to 
# MX-10261:Deliever message when autoReplyStartDate and autoReplyStopDate unset::Expect autoreply success on testlink 

#define accounts variables
id1=`echo $RANDOM`
user1=ar$id1
id2=`echo $RANDOM`
user2=ar$id2
autoreplymode="echo"

#define clean_account function
function clean_accounts ()
{
		echo "##########  doing some clear job ..."
		
		#delete accounts
		curl -s -X DELETE http://${MXOS1_HOST_IP}:$MXOS1__PORT/mxos/mailbox/v2/$user1@$newdomain >/dev/null
		tmp1=$(curl -s -X GET http://${MXOS1_HOST_IP}:$MXOS1__PORT/mxos/mailbox/v2/$user1@$newdomain |grep "Mailbox does not exist"|wc -l)
		curl -s -X DELETE http://${MXOS1_HOST_IP}:$MXOS1__PORT/mxos/mailbox/v2/$user2@$defaultdomain >/dev/null
		tmp2=$(curl -s -X GET http://${MXOS1_HOST_IP}:$MXOS1__PORT/mxos/mailbox/v2/$user2@$defaultdomain |grep "Mailbox does not exist"|wc -l)
		#delete domain
		curl -s -X DELETE http://${MXOS1_HOST_IP}:$MXOS1__PORT/mxos/domain/v2/$newdomain >/dev/null
		
		if [[ "$tmp1" -eq "1"  && "$tmp2" -eq "1" ]]
		then
		  echo -e "\033[32m##########  Accont deleted successfully\033[0m"
		  exit 100
		else
			echo -e "\033[31m##########  Accont deleted failed,PLease check manually,Exiting now ...\033[0m"
			exit 100
		fi
}

trap clean_accounts SIGHUP SIGINT SIGTERM

#1 clear mta.log and other tmp files
echo "########## 1 Clear mta.log using expect tool ..."
expect <<-EOF 
set timeout $expect_timeout	
spawn ssh imail2@${MX1_HOST_IP1}
expect  "*Password" { send "imail\r" }
expect  "*~" { send "> ~/log/mta.log\r" }
expect  "*~"
exit
EOF

#clear other tmp log files
rm expect*.log 
rm imapfetch*.log
rm send*.log
	
#2 create accounts user1@$defaultdomain and user2@$defaultdomain
echo "########## 2 Accounts provision ..."
#create domain
curl -s -X PUT -d "type=local" http://${MXOS1_HOST_IP}:$MXOS1__PORT/mxos/domain/v2/$newdomain >/dev/null
tmp1=$(curl -s -X PUT -d "cosId=default&password=p" http://${MXOS1_HOST_IP}:$MXOS1__PORT/mxos/mailbox/v2/$user1@$newdomain)
echo $tmp1
expr $tmp1 + 0 &>/dev/null
tmp11=$(echo $?)
tmp2=$(curl -s -X PUT -d "cosId=default&password=p" http://${MXOS1_HOST_IP}:$MXOS1__PORT/mxos/mailbox/v2/$user2@$defaultdomain)
echo $tmp2
expr $tmp2 + 0 &>/dev/null
tmp22=$(echo $?)
let tmpv=tmp11+tmp22
if [[ "$tmpv" -eq "0" ]]
then
  echo -e "\033[32m########## 2 Accont provision successfully, we can continue now\033[0m"
else
	echo -e "\033[31m########## 2 Accont provision failed,PLease check manually,Exiting now ...\033[0m"
	clean_accounts
	exit 1
fi

#3 configure user2 to proper autoreply mode
echo "########## 3 Configure user2 to echo autoreply mode using expect tool ..."
expect <<-EOF 
set timeout $expect_timeout	
log_file expect.log 
spawn ssh imail2@${MX1_HOST_IP1}
expect  "*Password" { send "imail\r" }
expect  "*~"  { send "echo 'internal:' >data.txt\r" }
expect  "*~"  { send "echo 'Echo,This is an autoreply message for internal senders!' >>data.txt\r" }
expect  "*~"  { send "echo 'external:' >>data.txt\r" }
expect  "*~"  { send "echo 'Echo,This is an external autoreply message for external senders!' >>data.txt\r" }
expect  "*~"  { send "autoreplyctrl ${user2}@$defaultdomain $autoreplymode data.txt none none\r" }
expect "*~"
exit
EOF

count=$(grep  -i "AutoReply data updated Successfully"  expect.log|wc -l)
if [[ "$count" -eq "1" ]];then
	echo -e "\033[32m##########3 Congifuration successfully\033[0m"
else
	echo -e "\033[31m##########3 Configuration failed,please check maunually!Exiting now ...\033[0m"
	clean_accounts
	exit 2
fi

# 4 deliever 1 message from user1 to user2, we expect that will have a autoreplied message (with origin message attached)in inbox of user1
echo "##########4 delieber 1 message from user1 to user2 ..."
#create message body
echo "Subject: test message about autoreply feature" >send.data
echo "To:$user2@$defaultdomain" >>send.data
echo >>send.data
echo "Echo,This ia a wonderful world!!" >>send.data

sendmail.pl  $MX1_HOST_IP1 $MX1_SMTP_PORT $user1@$newdomain $user2@$defaultdomain  <send.data >send.log 
count=$(grep "250 Message received" send.log|wc -l)
if [[ "$count" -eq "1" ]]
then
  echo -e "\033[32m########## 4 Message Deliver successfully, we can continue now\033[0m"
else
	echo -e "\033[31m########## 4 Message Deliver failed,please check manually,Exiting now ...\033[0m"
	cat send.log 
	clean_accounts
	exit 3
fi

#5 check mta.log, make sure autoreply flag "autoreplied" exist:
echo "########## 5 Check mta.log using expect tool ..."
expect <<-EOF 
set timeout $expect_timeout	
log_file expect.log 
spawn ssh imail2@${MX1_HOST_IP1}
expect  "*Password" { send "imail\r" }
expect  "*~" { send "cat /opt/imail2/log/mta.log\r" }
expect "*~"
exit
EOF

count=$(grep  -i "autoreplied"  expect.log|wc -l)	
count1=$(grep -i "delivered" expect.log |wc -l)
if [[ "$count" -eq "1" && "$count1" -eq "2" ]];then
	echo -e "\033[32m##########5 Autoreply messaeg delievered successfully!!\033[0m"
else
	echo -e "\033[31m##########5 Autoreply messaeg delievered failed!Please check manually,Exiting now ...\033[0m"
	clean_accounts
	exit 4
fi 

# 6 check autoreplied message in inbox of user1
echo "########## 5 check autoreplied message in inbox of user1 ..."
imapmail.pl   $MX1_HOST_IP1 $MX1_IMAP_PORT $user1 p inbox 2 >imapfetch.log
cat imapfetch.log
count=$(grep "Echo,This is an external autoreply message for external senders!" imapfetch.log|wc -l)
count1=$(grep "Echo,This ia a wonderful world!!" imapfetch.log|wc -l)
if [[ "$count" -eq	 "1" && "$count1" -eq "1" ]];then
		echo -e "\033[32m##########6 Check autoreplied messaege successfully!!\033[0m"
		log_pass "AutoReply in $autoreplymode mode without start/stop date for external sender test success!"
else
		echo -e "\033[31m##########6 Check autoreplied messaege failed!Please checl manually,Exiting now ...\033[0m"
		log_fail "AutoReply in $autoreplymode mode without start/stop date for external sender test failed!"
		clean_accounts
		exit 5
fi
#delete all accounts if all works fine.
clean_accounts