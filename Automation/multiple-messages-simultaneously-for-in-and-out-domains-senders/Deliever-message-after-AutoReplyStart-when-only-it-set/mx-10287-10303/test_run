#!/bin/bash
# this test script is applicable to 
#

#define accounts variables
user1=ar$(echo $RANDOM)
user2=ar$(echo $RANDOM)
user3=ar$(echo $RANDOM)
user4=ar$(echo $RANDOM)
user5=ar$(echo $RANDOM)

autoreplymode=reply

function clean_accounts ()
{
		echo "##########  doing some clear job ..."
		
		#delete accounts
		mos_delete_user.sh ${MXOS1_HOST_IP}  $MXOS1__PORT $user1@$defaultdomain
		mos_delete_user.sh ${MXOS1_HOST_IP}  $MXOS1__PORT $user2@$defaultdomain
		mos_delete_user.sh ${MXOS1_HOST_IP}  $MXOS1__PORT $user3@$defaultdomain
		mos_delete_user.sh ${MXOS1_HOST_IP}  $MXOS1__PORT $user4@$newdomain
		mos_delete_user.sh ${MXOS1_HOST_IP}  $MXOS1__PORT $user5@$newdomain
				
		#delete domain
		mos_delete_domain.sh ${MXOS1_HOST_IP}  $MXOS1__PORT $newdomain
}

trap clean_accounts SIGHUP SIGINT SIGTERM

#1 clear mta.log and other tmp files
echo "########## 1 Clear mta.log using expect tool ..."
expect.exp $expect_timeout $MX1_HOST_IP1 $expect_user $expect_pass $expect_subuser \
"> ~/log/mta.log"

#clear other tmp log files
rm expect*.log 
rm imapfetch*.log
rm send*.log
	
#2 create accounts user1@$defaultdomain and user2@$defaultdomain,user3@$defaultdomain,user4@$newdomain,user5@$newdomain
echo "########## 2 Accounts provision ..."


#create domain
mos_create_domain.sh ${MXOS1_HOST_IP}  $MXOS1__PORT $newdomain
#create accounts
mos_create_user.sh  ${MXOS1_HOST_IP}  $MXOS1__PORT $user1@$defaultdomain $passwd
mos_create_user.sh  ${MXOS1_HOST_IP}  $MXOS1__PORT $user2@$defaultdomain $passwd
mos_create_user.sh  ${MXOS1_HOST_IP}  $MXOS1__PORT $user3@$defaultdomain $passwd
mos_create_user.sh  ${MXOS1_HOST_IP}  $MXOS1__PORT $user4@$newdomain $passwd
mos_create_user.sh  ${MXOS1_HOST_IP}  $MXOS1__PORT $user5@$newdomain $passwd

#3 get currect epoch date ,and calaute the autoreplystartdate
expect.exp $expect_timeout $MX1_HOST_IP1 $expect_user $expect_pass $expect_subuser \
"date +%s"

#cet:curent epoc time
cet=$(grep -A  1 "date +%s" expect.log |grep -v "date")
cet=$(echo ${cet:0:10})
#set autoreplystartdate 5s later, and autoreplystopdate 30 minutes later.
let autoreplystartdate=cet+5

#4 configure user2 to proper autoreply mode
echo "########## 4 Configure user2 to vacation autoreply mode using expect tool ..."

expect.exp $expect_timeout $MX1_HOST_IP1 $expect_user $expect_pass $expect_subuser \
"echo 'internal:' >data.txt" \
"echo 'Vacation,This is an autoreply message for internal senders!' >>data.txt" \
"echo 'external:' >>data.txt" \
"echo 'Vacation,This is an external autoreply message for external senders!' >>data.txt" \
"autoreplyctrl ${user1}@$defaultdomain $autoreplymode data.txt $autoreplystartdate none"

count=$(grep  -i "AutoReply data updated Successfully"  expect.log|wc -l)
if [[ "$count" -eq "1" ]];then
	echo -e "\033[32m##########4 Congifuration successfully\033[0m"
else
	echo -e "\033[31m##########4 Configuration failed,please check maunually!Exiting now ...\033[0m"
	clean_accounts
	exit 2
fi

# 5 deliever 1 message from user2,user3,user4,user5 to user1
echo "##########5 delieber 1 message from user1 to user2 ..."
#create message body
echo "Subject: test message about autoreply feature" >send.data
echo "To:$user1@$defaultdomain" >>send.data
echo >>send.data
echo "Reply,This ia a wonderful world!!" >>send.data

sendmail.pl  $MX1_HOST_IP1 $MX1_SMTP_PORT $user2@$defaultdomain $user1@$defaultdomain  <send.data >send.log  &
sendmail.pl  $MX1_HOST_IP1 $MX1_SMTP_PORT $user3@$defaultdomain $user1@$defaultdomain  <send.data >>send.log  &
sendmail.pl  $MX1_HOST_IP1 $MX1_SMTP_PORT $user4@$newdomain $user1@$defaultdomain  <send.data >>send.log  &
sendmail.pl  $MX1_HOST_IP1 $MX1_SMTP_PORT $user5@$newdomain $user1@$defaultdomain  <send.data >>send.log  

ls -al  ~ >/dev/null

#6 check mta.log, make sure autoreply flag "autoreplied" exist:
echo "########## 6 Check mta.log using expect tool ..."
expect.exp $expect_timeout $MX1_HOST_IP1 $expect_user $expect_pass $expect_subuser \
"cat log/mta.log"

count=$(grep  -i "autoreplied"  expect.log|wc -l)
count1=$(grep -i "delivered" expect.log |wc -l)
if [[ "$count" -eq "4" && "$count1" -eq "8" ]];then
	echo -e "\033[32m##########6 Autoreply messaeg delievered successfully!!\033[0m"
else
	echo -e "\033[31m##########6 Autoreply messaeg delievered failed!Please check manually,Exiting now ...\033[0m"
	clean_accounts
	exit 4
fi 

#7 check autoreplied message in inbox of user2,user3,user4,user5
echo "########## 7 check autoreplied message in inbox of user2,user3,user4,user5 ..."
imapmail.pl   $MX1_HOST_IP1 $MX1_IMAP_PORT $user2 p inbox 2 >imapfetch.log
imapmail.pl   $MX1_HOST_IP1 $MX1_IMAP_PORT $user3 p inbox 2 >>imapfetch.log
imapmail.pl   $MX1_HOST_IP1 $MX1_IMAP_PORT $user4 p inbox 2 >>imapfetch.log
imapmail.pl   $MX1_HOST_IP1 $MX1_IMAP_PORT $user5 p inbox 2 >>imapfetch.log

cat imapfetch.log
count=$(grep "Reply,This ia a wonderful world!!" imapfetch.log|wc -l)
count1=$(grep "Reply,This is an external autoreply message for external senders!" imapfetch.log|wc -l)
count2=$(grep "Reply,This is an autoreply message for internal senders!" imapfetch.log|wc -l)

if [[ "$count" -eq	 "0" && "$count1" -eq "2" && "$count2" -eq "2" ]];then
		echo -e "\033[32m##########7 Check autoreplied messaege successfully!!\033[0m"
		log_pass "AutoReply in $autoreplymode mode with message delievered after start date for hybrid sender test success!"
else
		echo -e "\033[31m##########7 Check autoreplied messaege failed!Please checl manually,Exiting now ...\033[0m"
		log_fail "AutoReply in $autoreplymode mode with message delievered after start date for hybrid sender test failed!"
		clean_accounts
		exit 5
fi

#delete all accounts if all works fine.
clean_accounts