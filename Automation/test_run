#!/bin/bash
# this test script is applicable to MX-10015

#define variables
user1=ar1
user2=ar2

#1 clear mta.log and other tep files
echo "########## 1 Clear mta.log using expect tool ..."
	/usr/bin/expect <<-EOF 
	set timeout 50
	set MX1_HOST_IP1 "10.49.58.118"
	spawn ssh imail2@\${MX1_HOST_IP1}
	expect  "*Password" { send "imail\r" }
	expect  "*~" { send "> /opt/imail2/log/mta.log\r" }
	expect  "*~"
	exit
	EOF

#clear other temp log files
rm expect*.log 
rm imapfetch.log
rm send.log

	
#2 create accounts ar1@openwave.com and ar2@openwave.com
echo "########## 2 Accounts provision ..."
curl -s -X PUT -d "cosId=default&password=p" http://${MXOS1_HOST_IP}:$MXOS1__PORT/mxos/mailbox/v2/$user1@openwave.com |jq . >/dev/null
tmp1=$(curl -s -X GET http://${MXOS1_HOST_IP}:$MXOS1__PORT/mxos/mailbox/v2/$user1@openwave.com |jq .|grep "mailboxId"|wc -l)
curl -s -X PUT -d "cosId=default&password=p" http://${MXOS1_HOST_IP}:$MXOS1__PORT/mxos/mailbox/v2/$user2@openwave.com |jq . >/dev/null
tmp2=$(curl -s -X GET http://${MXOS1_HOST_IP}:$MXOS1__PORT/mxos/mailbox/v2/$user2@openwave.com |jq .|grep "mailboxId"|wc -l)
if [[ "$tmp1" -eq "1"  && "$tmp2" -eq "1" ]]
then
  echo -e "\033[32m########## 2 Accont provision successfully, we can continue now\033[0m"
else
	echo -e "\033[31m########## 2 Accont provision failed,PLease check manually,Exiting now ...\033[0m"
	exit 1
fi

#3 configure ar2 to autoreply mode

echo "########## 3 Configure user2 to proper autoreply mode using expect tool ..."
	/usr/bin/expect <<-EOF 
	set timeout 50
	set MX1_HOST_IP1 "10.49.58.118"
	set user ar2
	log_file expect1.log 
	spawn ssh imail2@\${MX1_HOST_IP1}
	expect  "*Password" { send "imail\r" }
	expect  "*~"  { send "echo 'internal:' >data.txt\r" }
	expect  "*~"  { send "echo 'This is an autoreply message for internal senders!' >>data.txt\r" }
	expect  "*~"  { send "echo 'external:' >>data.txt\r" }
	expect  "*~"  { send "echo 'This is an external autoreply message for external senders!' >>data.txt\r" }
	expect  "*~"  { send "autoreplyctrl \${user}@openwave.com echo data.txt none none\r" }
	expect "*~"
	exit
	EOF
	
	count=$(grep  -i "AutoReply data updated Successfully"  expect1.log|wc -l)
	if [[ "$count" -eq "1" ]];then
		echo -e "\033[32m##########3 Congifuration successfully\033[0m"
	else
		echo -e "\033[31m##########3 Configuration failed,please check maunually!Exiting now ...\033[0m"
		exit 2
	fi
 
# 4 delieber 1 message from user1 to user2, we expect that will have a autoreplied message in inbox of user1
echo "##########4 delieber 1 message from user1 to user2 ..."
#create message body
echo "Subject: test message about autoreply feature" >send.data
echo "To:$user2" >>send.data
echo >>send.data
echo "This ia a wonderful world!!" >>send.data

sendmail.pl  $MX1_HOST_IP1 $MX1_SMTP_PORT $user1 $user2  <send.data >send.log 
count=$(grep "250 Message received" send.log|wc -l)
if [[ "$count" -eq "1" ]]
then
  echo -e "\033[32m########## 4 Message Deliver successfully, we can continue now\033[0m"
else
	echo -e "\033[31m########## 4 Message Deliver failed,please check manually,Exiting now ...\033[0m"
	exit 3
fi

#5 check mta.log, make sure autoreply flag "autoreplied" exist:
echo "########## 5 Check mta.log using expect tool ..."
	/usr/bin/expect <<-EOF 
	set timeout 50
	set MX1_HOST_IP1 "10.49.58.118"
	log_file expect2.log 
	spawn ssh imail2@\${MX1_HOST_IP1}
	expect  "*Password" { send "imail\r" }
	expect  "*~" { send "cat /opt/imail2/log/mta.log\r" }
	expect "*~"
	exit
	EOF
	
	count=$(grep  -i "autoreplied"  expect2.log|wc -l)	
	count1=$(grep -i "delivered" expect2.log |wc -l)
	if [[ "$count" -eq "1" && "$count1" -eq "2" ]];then
		echo -e "\033[32m##########5 Autoreply messaeg delievered successfully!!\033[0m"
	else
		echo -e "\033[31m##########5 Autoreply messaeg delievered failed!Please check manually,Exiting now ...\033[0m"
		exit 4
	fi 
 
# 6 check autoreplied message in inbox of user1
echo "########## 5 check autoreplied message in inbox of user1 ..."
imapmail.pl   $MX1_HOST_IP1 $MX1_IMAP_PORT $user1 p inbox 2 >imapfetch.log
cat imapfetch.log
count=$(grep "This is an autoreply message for internal senders!" imapfetch.log|wc -l)
count1=$(grep "This ia a wonderful world!!" imapfetch.log|wc -l)
if [[ "$count" -eq	 "1" && "$count1" -eq "1" ]];then
		echo -e "\033[32m##########6 Check autoreplied messaege successfully!!\033[0m"
		log_pass "xxxxx OK"
else
		echo -e "\033[31m##########6 Check autoreplied messaege failed!Please checl manually,Exiting now ...\033[0m"
		log_fail "xxxxx not OK"
		exit 5
fi
 
#7  clear job
echo "########## 7 doing some clear job ..."
#delete accounts
curl -s -X DELETE http://${MXOS1_HOST_IP}:$MXOS1__PORT/mxos/mailbox/v2/$user1@openwave.com |jq . >/dev/null
tmp1=$(curl -s -X GET http://${MXOS1_HOST_IP}:$MXOS1__PORT/mxos/mailbox/v2/$user1@openwave.com |jq .|grep "Mailbox does not exist"|wc -l)
curl -s -X DELETE http://${MXOS1_HOST_IP}:$MXOS1__PORT/mxos/mailbox/v2/$user2@openwave.com |jq . >/dev/null
tmp2=$(curl -s -X GET http://${MXOS1_HOST_IP}:$MXOS1__PORT/mxos/mailbox/v2/$user2@openwave.com |jq .|grep "Mailbox does not exist"|wc -l)
if [[ "$tmp1" -eq "1"  && "$tmp2" -eq "1" ]]
then
  echo -e "\033[32m########## 7 Accont deleted successfully\033[0m"
else
	echo -e "\033[31m########## 7 Accont deleted failed,PLease check manually,Exiting now ...\033[0m"
	exit 6
fi

#clear other tmp files 
#rm test_run*.log